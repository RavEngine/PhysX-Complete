name: CI
on: push

jobs:
  build-linux-clang:
    name: Linux x64-clang Compile Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Dependencies
        run: |
              sudo apt-get update -y
              sudo apt-get install -y lsb-release wget software-properties-common apt-utils
              wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
              sudo add-apt-repository -y "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
              sudo apt-get update -y
              sudo apt remove build-essential -y
              sudo apt-get install cmake clang-14 llvm-14 ninja-build libgl1-mesa-dev libwayland-dev libxkbcommon-dev libasound2-dev libegl-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev -y --no-install-recommends
      - name: Configure
        run: |
            mkdir -p build 
            cd build
            CC=/usr/bin/clang-14 CXX=/usr/bin/clang++-14 cmake -G "Ninja" .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target ALL_BUILD

  build-linux-gcc:
    name: Linux x64-gcc Compile Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Dependencies
        run: |
              sudo apt-get update
              sudo add-apt-repository ppa:ubuntu-toolchain-r/test
              sudo apt-get update
              sudo apt-get install cmake g++-11 ninja-build libgl1-mesa-dev libwayland-dev libxkbcommon-dev libasound2-dev libegl-dev libvulkan-dev libx11-xcb-dev libxcb-dri2-0-dev libxcb-glx0-dev libxcb-icccm4-dev libxcb-keysyms1-dev libxcb-randr0-dev libxrandr-dev libxxf86vm-dev mesa-common-dev -y --no-install-recommends
      - name: Configure
        run: |
              mkdir -p build 
              cd build
              CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 cmake -G "Ninja" ..
      - name: Build
        run: | 
              cd build
              cmake --build . --config Release --target ALL_BUILD
      
  build-emscripten:
    if: ${{ false }}  # disable for now, since emscripten is not possible without WebGPU
    name: Emscripten-Linux Compile Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install cmake clang python3 libgl1-mesa-dev libwayland-dev libxkbcommon-dev libegl-dev -y --no-install-recommends
      - name: Setup Emscripten
        run: git clone https://github.com/emscripten-core/emsdk.git --depth=1 && cd emsdk && ./emsdk install latest && ./emsdk activate latest && source ./emsdk_env.sh
      - name: Configure
        run: mkdir -p build && cd build; cmake -DCMAKE_TOOLCHAIN_FILE=../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target ALL_BUILD --parallel

  build-mac:
    name: macOS Compile Check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: mkdir -p build && cd build; cmake -G "Xcode" ..
      - name: Build
        run: cd build; cmake --build . --config Release --target ALL_BUILD
 
  build-ios:
    name: iOS Compile Check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: mkdir -p build && cd build; cmake -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=../.github/workflows/toolchains/ios.toolchain.cmake -DPLATFORM=OS64COMBINED -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 .. 
      - name: Build
        run: cd build; cmake --build . --config Release --target ALL_BUILD
        
  build-tvos:
    name: tvOS Compile Check
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: mkdir -p build && cd build; cmake -G "Xcode" -DCMAKE_TOOLCHAIN_FILE=../.github/workflows/toolchains/ios.toolchain.cmake -DPLATFORM=TVOSCOMBINED -DENABLE_ARC=OFF -DDEPLOYMENT_TARGET=14.0 ..
      - name: Build
        run: cd build; cmake --build . --config Release --target ALL_BUILD
                
  build-windows:
    name: Windows x64 Compile Check
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: mkdir build && cd build; cmake -Wno-dev -DRAVENGINE_BUILD_TESTS=ON .. ; cmake ..
      - name: Build
        run: cd build; cmake --build . --config release --target ALL_BUILD
  
  build-windows-arm:
      name: Windows ARM64 Compile Check
      runs-on: windows-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v2
          with:
            submodules: true
        - name: Configure
          run: mkdir build && cd build; cmake -Wno-dev -DRAVENGINE_BUILD_TESTS=ON -AARM64 .. ; cmake ..
        - name: Build
          run: cd build; cmake --build . --config release --target ALL_BUILD

  build-UWP:
    name: UWP Compile Check
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Configure
        run: mkdir build && cd build; cmake -Ax64 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0" .. ; cmake .. ; 
      - name: Build
        run: cd build; cmake --build . --config release --target ALL_BUILD
